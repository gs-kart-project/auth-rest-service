package com.gskart.user.utils;

import com.gskart.user.DTOs.RoleDto;
import com.gskart.user.entities.Role;
import com.gskart.user.exceptions.JwtKeyStoreException;
import com.gskart.user.exceptions.JwtNotValidException;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.InvalidKeyException;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Set;
import java.util.UUID;

@Component
public class JwtHelper {
    private final IGskartKeystore gskartKeystore;

    public JwtHelper(IGskartKeystore gskartKeystore) {
        this.gskartKeystore = gskartKeystore;
    }

    public String generateToken(String username, String email, Set<RoleDto> roleDtoSet) throws JwtKeyStoreException {
        Instant now = Instant.now();
        String jwt = null;
        try {
            jwt = Jwts.builder()
                    .claim("email", email)
                    .claim("roles", roleDtoSet)
                    .subject(username)
                    .id(UUID.randomUUID().toString())
                    .issuedAt(Date.from(now))
                    // ToDo Token expiry time to be read from properties file.
                    .expiration(Date.from(now.plus(20L, ChronoUnit.MINUTES)))
                    .signWith(gskartKeystore.readPrivateKey())
                    .compact();
        } catch (CertificateException e) {
            throw new JwtKeyStoreException("Unable to generate Token due to CertificateException while reading private key.", e);
        } catch (KeyStoreException e) {
            throw new JwtKeyStoreException("Unable to generate Token due to KeyStoreException while reading private key.", e);
        } catch (IOException e) {
            throw new JwtKeyStoreException("Unable to generate Token due to IOException while reading private key.", e);
        } catch (NoSuchAlgorithmException e) {
            throw new JwtKeyStoreException("Unable to generate Token due to NoSuchAlgorithmException while reading private key.", e);
        } catch (UnrecoverableKeyException e) {
            throw new JwtKeyStoreException("Unable to generate Token due to UnrecoverableKeyException while reading private key.", e);
        }

        return jwt;
    }

    public boolean validateToken(String token, String username) throws JwtKeyStoreException {
        try {

            Claims claims = this.getClaimsFromToken(token);
            if(null == claims){
                // Unable to decrypt token with public key. Invalid token
                return false;
            }
            Date now = Date.from(Instant.now());
            if(claims.getExpiration().before(now)){
                // Token expired
                return false;
            }

            if(!claims.getSubject().equals(username)){
                // Token not generated for username provided
                return false;
            }

        } catch (JwtNotValidException e) {
            return false;
        }

        return true;
    }

    public Claims getClaimsFromToken(String token) throws JwtKeyStoreException, JwtNotValidException {
        JwtParser parser = null;
        Claims claims = null;
        try {
            parser = Jwts.parser()
                    .verifyWith(gskartKeystore.readPublicKey())
                    .build();
            claims = parser.parseSignedClaims(token).getPayload();
        } catch (CertificateException e) {
            throw new JwtKeyStoreException("Unable to get claims from Token due to CertificateException while reading public key.", e);
        } catch (KeyStoreException e) {
            throw new JwtKeyStoreException("Unable to get claims from Token due to KeyStoreException while reading public key.", e);
        } catch (IOException e) {
            throw new JwtKeyStoreException("Unable to get claims from Token due to IOException while reading public key.", e);
        } catch (NoSuchAlgorithmException e) {
            throw new JwtKeyStoreException("Unable to get claims from Token due to NoSuchAlgorithmException while reading public key.", e);
        }
        catch (ExpiredJwtException e) {
            // JWT Expired
            e.printStackTrace();
            throw new JwtNotValidException("Unable to get claims from Token as the JWT provided is expired", e);
        }
        catch (UnsupportedJwtException | InvalidKeyException e) {
            // JWT not generated by auth server
            e.printStackTrace();
            throw new JwtNotValidException("Unable to get claims from Token as the JWT provided is not issued by Auth server.", e);
        }
        catch (MalformedJwtException e){
            e.printStackTrace();
            throw new JwtNotValidException("Unable to get claims from Token as the JWT provided is invalid or Malformed.", e);
        }
        return claims;
    }


}
